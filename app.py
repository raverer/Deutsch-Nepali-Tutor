# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12-4dNIAAVttBLZrE83IzwbklgCA_7cWr
"""

import streamlit as st
from transformers import pipeline
import torch
import os
import tempfile
import speech_recognition as sr
from huggingface_hub import InferenceClient

# --- PAGE CONFIG ---
st.set_page_config(page_title="German‚ÄìNepali AI Tutor", page_icon="üéì", layout="wide")
st.title("üá©üá™ü§ñ German‚ÄìNepali AI Tutor")
st.write("Speak or type in **German**, **English**, or **Nepali**, and I‚Äôll translate and reply interactively!")

# --- LOAD HUGGING FACE TOKEN ---
HF_TOKEN = os.getenv("HF_TOKEN")  # Add securely via Streamlit secrets

# --- LOAD TRANSLATION MODELS ---
@st.cache_resource
def load_translation_models():
    german_to_english = pipeline("translation", model="Helsinki-NLP/opus-mt-de-en")
    english_to_german = pipeline("translation", model="Helsinki-NLP/opus-mt-en-de")
    english_to_nepali = pipeline("translation", model="Helsinki-NLP/opus-mt-en-ne")
    nepali_to_english = pipeline("translation", model="Helsinki-NLP/opus-mt-ne-en")
    return german_to_english, english_to_german, english_to_nepali, nepali_to_english

german_to_english, english_to_german, english_to_nepali, nepali_to_english = load_translation_models()

# --- SPEECH TO TEXT ---
def transcribe_audio(audio_file):
    recognizer = sr.Recognizer()
    with sr.AudioFile(audio_file) as source:
        audio_data = recognizer.record(source)
    try:
        return recognizer.recognize_google(audio_data)
    except sr.UnknownValueError:
        return "Sorry, I could not understand your speech."

# --- TEXT TO SPEECH (Fallback: Hugging Face) ---
def speak_text(text, lang="de"):
    try:
        # Try gTTS first (Google)
        from gtts import gTTS
        tts = gTTS(text=text, lang=lang)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as tmp:
            tts.save(tmp.name)
            return tmp.name
    except Exception:
        # Fallback to Hugging Face SpeechT5
        try:
            client = InferenceClient(token=HF_TOKEN)
            audio = client.text_to_speech(
                model="microsoft/speecht5_tts",
                inputs=text,
            )
            with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp:
                tmp.write(audio)
                return tmp.name
        except Exception as e:
            st.error(f"Speech synthesis failed: {e}")
            return None

# --- USER INPUT ---
st.subheader("üó£ Speak or üí¨ Type your sentence")
input_method = st.radio("Choose input method:", ["üí¨ Type", "üéô Speak"])

if input_method == "üí¨ Type":
    user_text = st.text_input("Enter text here:")
else:
    audio_file = st.file_uploader("Upload your voice (WAV format)", type=["wav"])
    user_text = ""
    if audio_file is not None:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp:
            tmp.write(audio_file.read())
            tmp_path = tmp.name
        user_text = transcribe_audio(tmp_path)
        st.write(f"üó£ You said: {user_text}")

# --- LANGUAGE SELECT ---
st.subheader("üåç Choose your input language")
language = st.selectbox("Select language:", ["German", "English", "Nepali"])

# --- TRANSLATION + RESPONSE ---
if st.button("Translate and Respond"):
    if user_text:
        if language == "German":
            english_text = german_to_english(user_text)[0]['translation_text']
            nepali_text = english_to_nepali(english_text)[0]['translation_text']
            st.success(f"**English:** {english_text}")
            st.info(f"**Nepali:** {nepali_text}")
            audio_path = speak_text(user_text, lang="de")
            if audio_path:
                st.audio(audio_path)

        elif language == "English":
            german_text = english_to_german(user_text)[0]['translation_text']
            nepali_text = english_to_nepali(user_text)[0]['translation_text']
            st.success(f"**German:** {german_text}")
            st.info(f"**Nepali:** {nepali_text}")
            audio_path = speak_text(german_text, lang="de")
            if audio_path:
                st.audio(audio_path)

        elif language == "Nepali":
            english_text = nepali_to_english(user_text)[0]['translation_text']
            german_text = english_to_german(english_text)[0]['translation_text']
            st.success(f"**English:** {english_text}")
            st.info(f"**German:** {german_text}")
            audio_path = speak_text(german_text, lang="de")
            if audio_path:
                st.audio(audio_path)
    else:
        st.warning("Please enter or upload your voice first.")